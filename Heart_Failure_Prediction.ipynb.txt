{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8YdxDXdrUcus"
      },
      "outputs": [],
      "source": [
        "# import data science basic libraries\n",
        "import pandas as pd \n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "K5N2te5xUvkW",
        "outputId": "00af3268-65ea-400d-9589-adee073411ea"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-3316b9f3-2f58-4721-884c-5bf8a2db27fa\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>ChestPainType</th>\n",
              "      <th>RestingBP</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>FastingBS</th>\n",
              "      <th>RestingECG</th>\n",
              "      <th>MaxHR</th>\n",
              "      <th>ExerciseAngina</th>\n",
              "      <th>Oldpeak</th>\n",
              "      <th>ST_Slope</th>\n",
              "      <th>HeartDisease</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40</td>\n",
              "      <td>M</td>\n",
              "      <td>ATA</td>\n",
              "      <td>140</td>\n",
              "      <td>289</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>172</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49</td>\n",
              "      <td>F</td>\n",
              "      <td>NAP</td>\n",
              "      <td>160</td>\n",
              "      <td>180</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>156</td>\n",
              "      <td>N</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Flat</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>M</td>\n",
              "      <td>ATA</td>\n",
              "      <td>130</td>\n",
              "      <td>283</td>\n",
              "      <td>0</td>\n",
              "      <td>ST</td>\n",
              "      <td>98</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>48</td>\n",
              "      <td>F</td>\n",
              "      <td>ASY</td>\n",
              "      <td>138</td>\n",
              "      <td>214</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>108</td>\n",
              "      <td>Y</td>\n",
              "      <td>1.5</td>\n",
              "      <td>Flat</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54</td>\n",
              "      <td>M</td>\n",
              "      <td>NAP</td>\n",
              "      <td>150</td>\n",
              "      <td>195</td>\n",
              "      <td>0</td>\n",
              "      <td>Normal</td>\n",
              "      <td>122</td>\n",
              "      <td>N</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Up</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3316b9f3-2f58-4721-884c-5bf8a2db27fa')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3316b9f3-2f58-4721-884c-5bf8a2db27fa button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3316b9f3-2f58-4721-884c-5bf8a2db27fa');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  MaxHR  \\\n",
              "0   40   M           ATA        140          289          0     Normal    172   \n",
              "1   49   F           NAP        160          180          0     Normal    156   \n",
              "2   37   M           ATA        130          283          0         ST     98   \n",
              "3   48   F           ASY        138          214          0     Normal    108   \n",
              "4   54   M           NAP        150          195          0     Normal    122   \n",
              "\n",
              "  ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
              "0              N      0.0       Up             0  \n",
              "1              N      1.0     Flat             1  \n",
              "2              N      0.0       Up             0  \n",
              "3              Y      1.5     Flat             1  \n",
              "4              N      0.0       Up             0  "
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# load data\n",
        "df = pd.read_csv('/content/heart.csv')\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sWnIwF4MU8bd"
      },
      "outputs": [],
      "source": [
        "#DATA DICTIONARY\n",
        "\n",
        "   # -->Age: age of the patient [years]\n",
        "   # -->Sex: sex of the patient [M: Male, F: Female] [TRANS : BM BALESH]\n",
        "   #ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n",
        "   #RestingBP: resting blood pressure [mm Hg]\n",
        "   #Cholesterol: serum cholesterol [mm/dl]\n",
        "   #FastingBS: fasting blood sugar [1: if FastingBS > 120 mg/dl, 0: otherwise]\n",
        "   #RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and/or - ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n",
        "   #MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n",
        "   #ExerciseAngina: exercise-induced angina [Y: Yes, N: No]\n",
        "   #Oldpeak: oldpeak = ST [Numeric value measured in depression]\n",
        "   #ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]\n",
        "   #HeartDisease: output class [1: heart disease, 0: Normal]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7-Txjr3AVnAB"
      },
      "outputs": [],
      "source": [
        "#EXPLORATORY ANALYSIS"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KqjP68tAVpI-",
        "outputId": "59045c81-456f-498f-98fe-e78f47f2b040"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(918, 12)"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# data shape\n",
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kjYwGJzqVsu8",
        "outputId": "c6a4862c-0b2f-434e-df9d-42c1ffee80cb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 918 entries, 0 to 917\n",
            "Data columns (total 12 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   Age             918 non-null    int64  \n",
            " 1   Sex             918 non-null    object \n",
            " 2   ChestPainType   918 non-null    object \n",
            " 3   RestingBP       918 non-null    int64  \n",
            " 4   Cholesterol     918 non-null    int64  \n",
            " 5   FastingBS       918 non-null    int64  \n",
            " 6   RestingECG      918 non-null    object \n",
            " 7   MaxHR           918 non-null    int64  \n",
            " 8   ExerciseAngina  918 non-null    object \n",
            " 9   Oldpeak         918 non-null    float64\n",
            " 10  ST_Slope        918 non-null    object \n",
            " 11  HeartDisease    918 non-null    int64  \n",
            "dtypes: float64(1), int64(6), object(5)\n",
            "memory usage: 86.2+ KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lCJFXXH0Vuh-",
        "outputId": "8175fa3f-2537-4e44-ed0a-a1d656ce00e4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Age                50\n",
              "Sex                 2\n",
              "ChestPainType       4\n",
              "RestingBP          67\n",
              "Cholesterol       222\n",
              "FastingBS           2\n",
              "RestingECG          3\n",
              "MaxHR             119\n",
              "ExerciseAngina      2\n",
              "Oldpeak            53\n",
              "ST_Slope            3\n",
              "HeartDisease        2\n",
              "dtype: int64"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# show unique values\n",
        "df.nunique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "cZRSwcLLVxlI",
        "outputId": "25468c1e-3e78-49d0-dd45-913760e545b9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-8cbb126d-66db-48df-b32e-5adc51cb04f2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>RestingBP</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>FastingBS</th>\n",
              "      <th>MaxHR</th>\n",
              "      <th>Oldpeak</th>\n",
              "      <th>HeartDisease</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "      <td>918.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>53.510893</td>\n",
              "      <td>132.396514</td>\n",
              "      <td>198.799564</td>\n",
              "      <td>0.233115</td>\n",
              "      <td>136.809368</td>\n",
              "      <td>0.887364</td>\n",
              "      <td>0.553377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.432617</td>\n",
              "      <td>18.514154</td>\n",
              "      <td>109.384145</td>\n",
              "      <td>0.423046</td>\n",
              "      <td>25.460334</td>\n",
              "      <td>1.066570</td>\n",
              "      <td>0.497414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>-2.600000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>47.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>173.250000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>54.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>223.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>138.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>60.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>267.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>156.000000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>77.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>603.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8cbb126d-66db-48df-b32e-5adc51cb04f2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8cbb126d-66db-48df-b32e-5adc51cb04f2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8cbb126d-66db-48df-b32e-5adc51cb04f2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "              Age   RestingBP  Cholesterol   FastingBS       MaxHR  \\\n",
              "count  918.000000  918.000000   918.000000  918.000000  918.000000   \n",
              "mean    53.510893  132.396514   198.799564    0.233115  136.809368   \n",
              "std      9.432617   18.514154   109.384145    0.423046   25.460334   \n",
              "min     28.000000    0.000000     0.000000    0.000000   60.000000   \n",
              "25%     47.000000  120.000000   173.250000    0.000000  120.000000   \n",
              "50%     54.000000  130.000000   223.000000    0.000000  138.000000   \n",
              "75%     60.000000  140.000000   267.000000    0.000000  156.000000   \n",
              "max     77.000000  200.000000   603.000000    1.000000  202.000000   \n",
              "\n",
              "          Oldpeak  HeartDisease  \n",
              "count  918.000000    918.000000  \n",
              "mean     0.887364      0.553377  \n",
              "std      1.066570      0.497414  \n",
              "min     -2.600000      0.000000  \n",
              "25%      0.000000      0.000000  \n",
              "50%      0.600000      1.000000  \n",
              "75%      1.500000      1.000000  \n",
              "max      6.200000      1.000000  "
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# data basic statistics\n",
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R_PfH4e0V2Be",
        "outputId": "66ad1ba9-bdf1-4867-aff3-e36430ac812b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Age               0\n",
              "Sex               0\n",
              "ChestPainType     0\n",
              "RestingBP         0\n",
              "Cholesterol       0\n",
              "FastingBS         0\n",
              "RestingECG        0\n",
              "MaxHR             0\n",
              "ExerciseAngina    0\n",
              "Oldpeak           0\n",
              "ST_Slope          0\n",
              "HeartDisease      0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# missing values in decerding order\n",
        "df.isnull().sum().sort_values(ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t2JgJ4WeV5Hk",
        "outputId": "4ca0869b-8334-4dc2-97e1-1ac1009c0dce"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# duplicated values\n",
        "df.duplicated().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l0NOszTviDRd",
        "outputId": "ca2feb2e-ddf9-4c8b-9f90-02b5764a99dc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Categorical features:\n",
            "     Sex ChestPainType RestingECG ExerciseAngina ST_Slope\n",
            "0     M           ATA     Normal              N       Up\n",
            "1     F           NAP     Normal              N     Flat\n",
            "2     M           ATA         ST              N       Up\n",
            "3     F           ASY     Normal              Y     Flat\n",
            "4     M           NAP     Normal              N       Up\n",
            "..   ..           ...        ...            ...      ...\n",
            "913   M            TA     Normal              N     Flat\n",
            "914   M           ASY     Normal              N     Flat\n",
            "915   M           ASY     Normal              Y     Flat\n",
            "916   F           ATA        LVH              N     Flat\n",
            "917   M           NAP     Normal              N       Up\n",
            "\n",
            "[918 rows x 5 columns]\n",
            "Numerical features:\n",
            "      Age  RestingBP  Cholesterol  FastingBS  MaxHR  Oldpeak  HeartDisease\n",
            "0     40        140          289          0    172      0.0             0\n",
            "1     49        160          180          0    156      1.0             1\n",
            "2     37        130          283          0     98      0.0             0\n",
            "3     48        138          214          0    108      1.5             1\n",
            "4     54        150          195          0    122      0.0             0\n",
            "..   ...        ...          ...        ...    ...      ...           ...\n",
            "913   45        110          264          0    132      1.2             1\n",
            "914   68        144          193          1    141      3.4             1\n",
            "915   57        130          131          0    115      1.2             1\n",
            "916   57        130          236          0    174      0.0             1\n",
            "917   38        138          175          0    173      0.0             0\n",
            "\n",
            "[918 rows x 7 columns]\n"
          ]
        }
      ],
      "source": [
        "# numerical and categorical features \n",
        "Categorical = df.select_dtypes(include=['object'])\n",
        "Numerical = df.select_dtypes(include=['int64', 'float64'])\n",
        "print('Categorical features:\\n', Categorical)\n",
        "print('Numerical features:\\n', Numerical)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NRFHbstaiI1P",
        "outputId": "f456e3be-d561-4afe-ab71-f8765757557b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1    508\n",
              "0    410\n",
              "Name: HeartDisease, dtype: int64"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# count target variable\n",
        "df['HeartDisease'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wo1JulKkiP7u"
      },
      "outputs": [],
      "source": [
        "#VISUALIZATION"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "id": "ACDp_3s8iSRr",
        "outputId": "98e32ee8-fb44-41c0-e1f4-bcc0efaad638"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Normal and Heart Disease with target column\n",
        "plt.figure(figsize=(15,7))\n",
        "plt.pie(df['HeartDisease'].value_counts(), labels=['Heart Disease[1]', 'Normal[0]'], autopct='%1.1f%%')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "sgddZZ51ityS",
        "outputId": "c18b2555-d45c-4b9e-9c5d-d2826399681c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABIwAAAJfCAYAAAAdLE0UAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzde5TddX3v/9cbEolisAIREZhiPa0gRi6Jl4oXlKO2YrFSZR2thmjPoqcVVErTsqy/HJvqqeeAsIr2p8f+QIzVKlbzg3q/LOul4oUAP8JF61FjRBG5KBcrLdHP74/shHwwZCaZ2bNnJ4/HWrMye+/vvPc7e9hZw3N9955qrQUAAAAANttj1AsAAAAAMLcIRgAAAAB0BCMAAAAAOoIRAAAAAB3BCAAAAICOYAQAAABARzACAAAAoCMYAQBMUVX9c1X9uKr2GvUuAADDJBgBAExBVR2a5KlJWpITR7oMAMCQCUYAAFOzLMmXk1yU5JTNV1bVflX1T1V1R1V9rareUFVf3Or2w6rqU1V1W1V9o6pOnv3VAQB2zLxRLwAAMCaWJTk3yVeSfLmqDmit3ZTkb5P8NMnDkxya5BNJvpskVbV3kk8lWZnkt5MsTvKpqrqmtXbdrP8NAACmyBlGAACTqKqnJPnVJBe31tYm+VaSl1TVnkl+L8l/b6392yACvWurL31ekvWttXe21ja21q5M8sEkL5rlvwIAwA4RjAAAJndKkk+21m4ZXH7v4LpF2XTG9ve2Onbrz381yROr6iebP5L8fjadjQQAMGd5SRoAwHZU1QOTnJxkz6r64eDqvZL8SpIDkmxMcnCSfx3cdshWX/69JJ9rrT1rltYFAJgR1Vob9Q4AAHNWVb04m96n6Kgk/7HVTRcn+Vo2xaKfJ/mvSSaSfDLJhtbaU6pqYZJrkrwuyfsGX3dUkrtaa9fPzt8AAGDHeUkaAMD2nZLkna21Da21H27+SPLWbHp52WlJHpLkh0neneQfkvx7krTW7kzy7CT/JckPBsf8z2w6QwkAYM5yhhEAwAyqqv+Z5OGttVNGvQsAwM5yhhEAwDRU1WFV9bja5AlJ/iDJmlHvBQAwHd70GgBgehZm08vQHpHkpiRvTnLJSDcCAJgmL0kDAAAAoOMlaQAAAAB0xuIlafvvv3879NBDR70GAAAAwC5j7dq1t7TWFm3rtrEIRoceemguv/zyUa8BAAAAsMuoqu/e321ekgYAAABARzACAAAAoCMYAQAAANAZi/cwAgB2Tffcc09uuOGG3H333aNehfuxYMGCHHzwwZk/f/6oVwEAZpFgBACMzA033JCFCxfm0EMPTVWNeh3uo7WWW2+9NTfccEMe+chHjnodAGAWeUkaADAyd999d/bbbz+xaI6qquy3337OAAOA3ZBgBACMlFg0t/n+AMDuSTACAAAAoOM9jACAOWPJitUzOm/t2csmPaaq8id/8id585vfnCQ555xzctddd+X1r3/9jO6yPccdd1zOOeecLF26dNbuEwBge5xhBADs1vbaa6986EMfyi233LJTX79x48YZ3ggAYPScYQQA7NbmzZuXU089Needd17e+MY3dretX78+r3jFK3LLLbdk0aJFeec735mJiYksX748CxYsyJVXXpljjz02t912Wx74wAfmyiuvzI9+9KNceOGFWb16dS677LI88YlPzEUXXZQk+aM/+qN87Wtfy89+9rO88IUvzF/+5V+O4G8MADA5ZxgBALu9V77ylXnPe96T22+/vbv+9NNPzymnnJKrr746v//7v59XvepVW2674YYb8qUvfSnnnntukuTHP/5xLrvsspx33nk58cQTc8YZZ+Taa6/NunXrctVVVyVJ3vjGN+byyy/P1Vdfnc997nO5+uqrZ+8vCQCwAwQjAGC3t88++2TZsmU5//zzu+svu+yyvOQlL0mSvOxlL8sXv/jFLbe96EUvyp577rnl8u/8zu+kqrJ48eIccMABWbx4cfbYY48cccQRWb9+fZLk4osvzjHHHJOjjz461157ba677rrh/+UAAHaCYAQAkOQ1r3lNLrjggvz0pz+d0vF77713d3mvvfZKkuyxxx5bPt98eePGjfnOd76Tc845J5/5zGdy9dVX54QTTsjdd989c38BAIAZJBgBACTZd999c/LJJ+eCCy7Yct2Tn/zkvO9970uSvOc978lTn/rUnZ5/xx13ZO+9985DHvKQ3HTTTfnYxz427Z0BAIbFm14DAHPG2rOXjfT+zzzzzLz1rW/dcvktb3lLXv7yl+fss8/e8qbXO+vII4/M0UcfncMOOyyHHHJIjj322JlYGQBgKKq1NuodJrV06dJ2+eWXj3oNAGCGXX/99Tn88MNHvQaT8H0CgF1TVa1trS3d1m1ekgYAAABARzACAAAAoCMYAQAAANARjAAAAADoCEYAAAAAdAQjAAAAADrzRr0AAMBmG1YtntF5EyvXTXrMgx/84Nx1111bLl900UW5/PLL89a3vnXa979+/fp86Utfykte8pJt3nb44YfnsMMOy913352FCxfmj//4j7N8+fIkyaWXXprrrrsuZ5111rT3AADYUYIRAMAQbNy4MevXr8973/vebQajJHnUox6VK6+8Mkny7W9/OyeddFJaa3n5y1+eE088MSeeeOI2v+66792y3ft+zCH7T295pmQqgXMq0RIA5iIvSQMAuB8333xzfu/3fi+Pf/zj8/jHPz7/8i//kiT56le/mt/8zd/M0UcfnSc/+cn5xje+kWTT2UknnnhinvnMZ+b444/PWWedlS984Qs56qijct555233vn7t134t5557bs4///wts0477bQkyQc+8IE89rGPzZFHHpmnPe1pSZKf//znOeeNr8/Jz3tWXvDsp+fiv39XkuSnP70rxx9/fI455pgsXrw4l1xyyeD6n+aEE07IkUcemcc+9rF5//vfnyRZu3Ztnv70p2fJkiV5znOekxtvvHGGH0UAYBw5wwgA2K397Gc/y1FHHbXl8m233bblzJ5Xv/rVOeOMM/KUpzwlGzZsyHOe85xcf/31Oeyww/KFL3wh8+bNy6c//em89rWvzQc/+MEkyRVXXJGrr746++67b/75n/8555xzTj784Q9PaZdjjjkmX//613/p+lWrVuUTn/hEDjrooPzkJz/JD+7cmA++7z158MKFufjDn8p//Pu/56UnnZAnP+24PPwRB2XNmjXZZ599csstt+RJT3pSTjzxxHz84x/PIx7xiHzkIx9Jktx+++255557cvrpp+eSSy7JokWL8v73vz9/8Rd/kQsvvHC6DysAMOYEIwBgt/bABz4wV1111ZbLm9/DKEk+/elP57rrrtty2x133JG77rort99+e0455ZR885vfTFXlnnvu2XLMs571rOy77747tUtrbZvXH3vssVm+fHlOPvnknHTSSUmSL33+s/nXr1+XT370n5Ikd915Z767/ts54MBH5LWvfW0+//nPZ4899sj3v//93HTTTVm8eHHOPPPM/Pmf/3me97zn5alPfWquueaaXHPNNXnWs56VZNNZSwceeOBO7Q4A7FoEIwCA+/GLX/wiX/7yl7NgwYLu+tNOOy3PeMYzsmbNmqxfvz7HHXfcltv23nvvnb6/K6+8MocffvgvXf/2t789X/nKV/KRj3wkS5YsyXsv/WRaWl676q/zlKc/szt2zQf+ITfffHPWrl2b+fPn59BDD83dd9+d3/iN38gVV1yRj370o3nd616X448/Pi94wQtyxBFH5LLLLtvpnQGAXZP3MAIAuB/Pfvaz85a3vGXL5c1nIt1+++056KCDkmw6I+n+LFy4MHfeeeeU7mv9+vX50z/905x++um/dNu3vvWtPPGJT8yqVauyaNGi3PiD7+fYpz0z73/3RVvOblr/7W/l3/7tp7nrjjvysIc9LPPnz89nP/vZfPe7302S/OAHP8iDHvSgvPSlL82KFStyxRVX5NGPfnRuvvnmLcHonnvuybXXXjulfQGAXZszjACAOWOu/Uap888/P6985SvzuMc9Lhs3bszTnva0vP3tb8+f/dmf5ZRTTskb3vCGnHDCCff79Y973OOy55575sgjj8zy5ctzxhlndLd/61vfytFHH5277747CxcuzKte9aosX778l+asWLEi3/zmN9Nay/HHH5/DHvPYPPrwI/KDGzbkRc89Pq21PHS//fKWv1ud573ghfnT/7Y8ixcvztKlS3PYYYclSdatW5cVK1Zkjz32yPz58/O2t70tD3jAA/KP//iPedWrXpXbb789GzduzGte85occcQRM/o4AgDjp+7vtfJzydKlS9vm9xIAAHYd119//TZfgsX2Xfe9W7Z7+2MO2X9G78/3ads2rFo86TFzLYICwNaqam1rbem2bvOSNAAAAAA6ghEAAAAAHcEIABipcXh5/O7M9wcAdk+CEQAwMgsWLMitt94qSsxRrbXceuutWbBgwahXAQBmmd+SBgCMzMEHH5wbbrghN99886hXGSs//PFd27297pq5x3PBggU5+OCDZ2weADAeBCMAYGTmz5+fRz7ykaNeY+y8dMXq7d6+9uxls7QJALCr8pI0AAAAADqCEQAAAAAdwQgAAACAjmAEAAAAQEcwAgAAAKAjGAEAAADQEYwAAAAA6AhGAAAAAHQEIwAAAAA6ghEAAAAAHcEIAAAAgI5gBAAAAEBHMAIAAACgIxgBAAAA0BGMAAAAAOgIRgAAAAB0BCMAAAAAOoIRAAAAAB3BCAAAAICOYAQAAABARzACAAAAoCMY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\n",
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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ZTps8WWb9fGWn3fKk97maU97Wj7+8Y/nLW95S/bcc89JP8eaNWsyNjbUP6kAAEbOXzcAwDZtbGwsp512Wi644IK84x3v6PatXLkyf/RHf5R77703s2bNyvvf//7MmTMnp556ambMmJHrr78+Rx55ZO6///7stNNOuf7663PPPffkfe97Xy677LJce+21ef7zn5+lS5cmSf74j/843/zmN/OTn/wkr3rVq/JXf/VXU/AvBgB4csM8hhEAwBbhDW94Qz74wQ/mwQcf7LaffvrpWbRoUVasWJHXvOY1OeOMM9bvW7VqVb72ta/lXe96V5LkRz/6Ua699tpccMEFOf7443PWWWfl5ptvzo033pgbbrghSfKOd7wjy5Yty4oVK/LlL385K1asGN0/EgBgEgQjAGCbt8suu+SUU07JhRde2G2/9tprc/LJJydJ/vAP/zBf/epX1+979atfne2333799eOOOy5Vlblz52avvfbK3Llzs9122+XAAw/MypUrkyQf+chHcuihh2b+/Pm5+eabc8sttwz/HwcAsAkEIwCAJGeeeWYuueSSPPLIIxO6/c4779xdf9rTnpYk2W677dZfXnd9zZo1+d73vpfzzz8/11xzTVasWJFjjz3W6eoBgGlLMAIASLL77rvnpJNOyiWX/OIEri960Yvy4Q9/OEnywQ9+MC95yUs2+fEfeuih7LzzznnmM5+Zu+++O//wD//wlGcGABgWwQgAYODss8/Ovffeu/76RRddlPe///05+OCD84EPfCDvfve7N/mx582bl/nz52f//ffPySefnCOPPHJzjAwAMBTVWpvqGZ7UggUL2rJly6Z6DABgM7v11ltzwAEHTPUYPAmvEwBsnapqeWttwcb2WWEEAAAAQEcwAgAAAKAjGAEAAADQEYwAAAAA6AhGAAAAAHQEIwAAAAA6ghEAsE17xjOe0V1funRp3vjGN26Wx165cmX+/u//ftx9O+20U+bPn58DDjggRxxxRJYuXbp+/9VXX513vvOdm2UOAIDJGpvqAQAA1rljydzN+nhzzr1xsz7eZKxZs2Z9MDr55JM3eptf/dVfzfXXX58kuf322/OKV7wirbW87nWvy/HHH5/jjz9+lCMDAKxnhREAQ3PY4svG/YAtwerVq/PKV74yhx9+eA4//PD80z/9U5LkG9/4Rl74whdm/vz5edGLXpRvf/vbSdauTjr++OPzspe9LAsXLsw555yTr3zlKznkkENywQUXPOFz/cqv/Ere9a535cILL1z/WOtWOn30ox/NQQcdlHnz5uWlL31pkuRnP/tZFi9enMMPPzwHH3xw/vZv/zZJ8vDDD2fhwoU59NBDM3fu3Fx11VVJkkceeSTHHnts5s2bl4MOOiiXX355kmT58uX5jd/4jRx22GE55phjcuedd27mryIAsCWywggA2Kb95Cc/ySGHHLL++v33379+Zc+b3vSmnHXWWXnxi1+cO+64I8ccc0xuvfXW7L///vnKV76SsbGxfOELX8hb3/rWfOxjH0uSXHfddVmxYkV23333fOlLX8r555+fT37ykxOa5dBDD823vvWt/7B9yZIl+exnP5t99tknDzzwQJLkkksuyTOf+cx885vfzE9/+tMceeSRefnLX55nP/vZufLKK7PLLrvk3nvvzQte8IIcf/zx+cxnPpNnPetZ+dSnPpUkefDBB/PYY4/l9NNPz1VXXZVZs2bl8ssvz5//+Z/nfe9731P6mgIAWz7BCADYpu2000654YYb1l9funRpli1bliT5whe+kFtuuWX9voceeigPP/xwHnzwwSxatCi33XZbqiqPPfbY+tscffTR2X333TdpltbaRrcfeeSROfXUU3PSSSflFa94RZLkc5/7XFasWJErrrgiydoAdNttt2X27Nl561vfmn/8x3/Mdtttlx/+8Ie5++67M3fu3Jx99tl585vfnN/93d/NS17yktx000256aabcvTRRydZu2pp77333qTZAYCti2AEADCOn//85/nnf/7nzJgxo9v+xje+Mb/5m7+ZK6+8MitXrsxRRx21ft/OO++8yc93/fXX54ADDvgP29/73vfm61//ej71qU/lsMMOy/Lly9Nay0UXXZRjjjmmu+3SpUuzevXqLF++PDvssEP23XffPProo/n1X//1XHfddfn0pz+dv/iLv8jChQvze7/3eznwwANz7bXXbvLMAMDWyTGMAADG8fKXvzwXXXTR+uvrViI9+OCD2WeffZKkO7PZ482cOTM//vGPJ/RcK1euzJ/+6Z/m9NNP/w/7vvvd7+b5z39+lixZklmzZuUHP/hBjjnmmLznPe9Zv7rpX//1X/PII4/kwQcfzC/90i9lhx12yBe/+MV8//vfT5L827/9W57+9Kfnta99bRYv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\n",
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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2Wc/at+SJUvy1re+Nffcc09mzJiRiy++OM997nNz3HHHZfr06bnuuusyd+7c3Hfffdl2221z3XXX5e67785FF12USy+9NFdffXUOPvjgzJ8/P0nyh3/4h7nmmmvys5/9LG984xvzgQ98YAJ+YwAAAGBL4Na2ETnxxBPzyU9+MsuXL3/U+kknnZR58+Zl0aJFOeaYY3LyySev27d06dL8wz/8Qz784Q8nSe6///5cffXVOffcc3PEEUfktNNOy0033ZQbbrgh119/fZLk7LPPzoIFC7Jo0aJ861vfyqJFizbdLwkAAABsUYSkEdlhhx1y7LHH5rzzznvU+tVXX52jjz46SfKWt7wl3/nOd9bte9Ob3pStttpq3fZrX/vaVFX22Wef7Lrrrtlnn30yZcqU7L333lmyZEmS5LLLLsuBBx6YAw44IDfddFNuvvnm0f9yAAAAwBZJSBqhU089NRdeeGEefvjhruO32267R21vs802SZIpU6ase712e/Xq1fnBD36Qc845J1deeWUWLVqUV7/61Vm5cuVT9wsAAAAAjCMkjdBOO+2Uo446KhdeeOG6td/4jd/Ipz/96STJJz/5ybz85S9/wud/8MEHs91222XHHXfMXXfdlb/+679+0jMDAAAAPBYhacROP/303HPPPeu2zz///Fx88cXZd99984lPfCIf+chHnvC599tvvxxwwAHZc889c/TRR2fu3LlPxcgAAAAAG1SttYme4QmbM2dOW7BgwaPWFi9enL322muCJqKXvxMAAABMTlW1sLU2Z0P7XJEEAAAAQBchCQAAAIAuQhIAAAAAXYQkAAAAALoISQAAAAB0EZIAAAAA6CIkjcAznvGMR23Pnz8/73znO5+Scy9ZsiSf+tSnHnPftttumwMOOCB77bVXDjrooMyfP3/d/iuuuCIf+tCHnpI5AAAAgC3P1IkeYNR+dNY+T+n5nvsfb3hKz7cxVq9evS4kHX300Rs85td+7ddy3XXXJUluv/32vOENb0hrLccff3yOOOKIHHHEEZtyZAAAAGAzstmHpMlm2bJlecc73pEf/ehHSZK/+Iu/yNy5c/P9738/p5xySlauXJltt902F198cV70ohdl/vz5+cIXvpAVK1ZkzZo1eeSRR7J48eLsv//+mTdvXk477bTHfK/nPe95+fCHP5zTTz89xx9/fObPn58FCxbkox/9aD772c/mAx/4QLbaaqvsuOOO+fa3v501a9bkzDPPzFVXXZVHHnkkJ554Yt7+9rdnxYoVOfLII3P//fdn1apV+eAHP5gjjzwyDz/8cI466qgsXbo0a9asyZ/+6Z/m937v97Jw4cK8613vyooVK7LLLrtk/vz5ec5znrOp/okBAGCL8VT/j3Ogz0ReZDLRhKQR+NnPfpb9999/3fZ999237kqgU045Jaeddlpe9rKX5Uc/+lEOP/zwLF68OHvuuWf+/u//PlOnTs03vvGNvO9978vnP//5JMm1116bRYsWZaeddspVV12Vc845J1/+8pe7ZjnwwAPzT//0T7+wftZZZ+Vv//ZvM3PmzDzwwANJkgsvvDA77rhjrrnmmjzyyCOZO3duXvnKV2b33XfP5Zdfnh122CH33HNPDjnkkBxxxBH5m7/5m+y22275yle+kiRZvnx5Vq1alZNOOilf+tKXMmPGjHzmM5/JH//xH+eiiy56Uv+mAAAAwMQTkkZg2223zfXXX79ue+2VQEnyjW98IzfffPO6fQ8++GBWrFiR5cuXZ968ebnllltSVVm1atW6Y17xildkp512ekKztNY2uD537twcd9xxOeqoo/KGN7whSfK1r30tixYtyuc+97kkY2HolltuyaxZs/K+970v3/72tzNlypTceeedueuuu7LPPvvk9NNPz3vf+9685jWvyctf/vLceOONufHGG/OKV7wiSbJmzRpXIwEAAMBmQkjaxH7+85/nu9/9bqZPn/6o9Xe+8535rd/6rVx++eVZsmRJDj300HX7tttuuyf8ftddd1322muvX1j/2Mc+lu9973v5yle+kpe85CVZuHBhWms5//zzc/jhhz/q2Pnz52fZsmVZuHBhpk2bltmzZ2flypV54QtfmGuvvTZf/epX8yd/8ic57LDD8vrXvz577713rr766ic8MwAAADA5jfRT26pqSVXdUFXXV9WCYW2nqvp6Vd0yfH/WsF5VdV5V3VpVi6rqwFHONlFe+cpX5vzzz1+3vfbKpeXLl2fmzJlJ8qhPWlvf9ttvn4ceeqjrvZYsWZJ3v/vdOemkk35h32233ZaDDz44Z511VmbMmJE77rgjhx9+eC644IJ1V0P9y7/8Sx5++OEsX748z372szNt2rR885vfzA9/+MMkyY9//OP8yq/8St785jfnjDPOyLXX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\n",
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# ploting numerical features with target\n",
        "for i in Numerical:\n",
        "    plt.figure(figsize=(20 ,10))\n",
        "    sns.countplot(x=i, data=df, hue='HeartDisease')\n",
        "    plt.legend(['Normal', 'Heart Disease'])\n",
        "    plt.xticks(rotation=90)\n",
        "    plt.title(i)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "yW0cGFfqjriT",
        "outputId": "4431fe58-f75d-4619-95ec-63787c332704"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#ploting categorical features with target\n",
        "for i in Categorical:\n",
        "    plt.figure(figsize=(10,5))\n",
        "    sns.countplot(x=i, data=df, hue='HeartDisease', edgecolor='black')\n",
        "    plt.legend(['Normal', 'Heart Disease'])\n",
        "    plt.title(i)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "89TOUHmZjxLI"
      },
      "outputs": [],
      "source": [
        "#pairplot using target HeartDisease Column\n",
        "sns.pairplot(df, hue='HeartDisease')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4UVtPjpSj97x"
      },
      "outputs": [],
      "source": [
        "# distribution plot of Age for HeartDisease\n",
        "sns.distplot(df['Age'][df['HeartDisease'] == 1], kde=True, color='red', label='Heart Disease')\n",
        "sns.distplot(df['Age'][df['HeartDisease'] == 0], kde=True, color='green', label='Normal')\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6TlCD7uJkXJj"
      },
      "outputs": [],
      "source": [
        "# distribution plot of Age for HeartDisease\n",
        "sns.distplot(df['Age'][df['HeartDisease'] == 1], kde=True, color='red', label='Heart Disease')\n",
        "sns.distplot(df['Age'][df['HeartDisease'] == 0], kde=True, color='green', label='Normal')\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JB5KP7XEkfyj"
      },
      "outputs": [],
      "source": [
        "#DATA PREPROCESSING\n",
        "# select numerical features and encoding it\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "# select numerical features\n",
        "numerical_features = df.select_dtypes(include=['int64', 'float64'])\n",
        "# apply label encoding\n",
        "numerical_features = numerical_features.apply(LabelEncoder().fit_transform)\n",
        "numerical_features.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VhhYVIodlAt1"
      },
      "outputs": [],
      "source": [
        "# One-Hot encoding the categorical features using get_dummies()\n",
        "# select categorical features\n",
        "categorical_features = df.select_dtypes(include=['object'])\n",
        "# apply get_dummies encoding\n",
        "categorical_features = pd.get_dummies(categorical_features)\n",
        "categorical_features.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tFDPX9oxlFAe"
      },
      "outputs": [],
      "source": [
        "# combine numerical and categorical features\n",
        "combined = pd.concat([numerical_features, categorical_features], axis=1)\n",
        "combined.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BTv2a9delMDd"
      },
      "outputs": [],
      "source": [
        "# separet features and target\n",
        "X = combined.drop(['HeartDisease'], axis=1)\n",
        "y = combined['HeartDisease']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eN4nXg8zlOxX"
      },
      "outputs": [],
      "source": [
        "X.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pT0N52yslVIv"
      },
      "outputs": [],
      "source": [
        "y.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l8YBXbgivl60"
      },
      "outputs": [],
      "source": [
        "from sklearn.datasets import make_classification\n",
        "from matplotlib import pyplot as plt\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "f9pZs0q8vzvy",
        "outputId": "ff897120-93ce-4e52-c7e3-c6878f95e9c4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(918, 12)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "-POFboXmzh6K",
        "outputId": "bfbdc880-49b4-40db-b72c-01111a16ec53"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "11016"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.size"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "eyzRDX5k0vz7",
        "outputId": "f846e39f-50dc-42c8-fae5-d2314c7d54ea"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 12,  41, 147,   0,  98,  10],\n",
              "       [ 21,  55,  40,   0,  82,  20],\n",
              "       [  9,  31, 141,   0,  25,  10],\n",
              "       ...,\n",
              "       [ 29,  31,   9,   0,  41,  22],\n",
              "       [ 29,  31,  94,   0, 100,  10],\n",
              "       [ 10,  39,  35,   0,  99,  10]])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#divide data into i/p and o/p\n",
        "x = numerical_features.iloc[:,0:6].values\n",
        "x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "yq7O8eQv1eK2",
        "outputId": "01ee33cd-c7fb-4b11-84d8-e97e1b355195"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0,\n",
              "       0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n",
              "       1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0,\n",
              "       0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0,\n",
              "       1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,\n",
              "       0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\n",
              "       1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
              "       0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n",
              "       1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0,\n",
              "       1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1,\n",
              "       1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n",
              "       1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,\n",
              "       1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n",
              "       1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n",
              "       1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,\n",
              "       1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n",
              "       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n",
              "       1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n",
              "       1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n",
              "       0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0,\n",
              "       0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1,\n",
              "       0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0,\n",
              "       1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n",
              "       1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1,\n",
              "       0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0,\n",
              "       1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n",
              "       0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1,\n",
              "       1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,\n",
              "       1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,\n",
              "       1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0,\n",
              "       1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n",
              "       0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1,\n",
              "       0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y = numerical_features.iloc[:,6].values\n",
        "y"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "rC9SuHbG2F5m",
        "outputId": "187e7182-5cc4-40ac-a3e8-d16686fa3416"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1    508\n",
              "0    410\n",
              "Name: HeartDisease, dtype: int64"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#I just want to know how many people have HeartDiesease \n",
        "df['HeartDisease'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "mAwtdvBR2kyE",
        "outputId": "d3ff080f-f7e1-414b-f082-8369f6711ea3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0, 1])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['HeartDisease'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "m46QwAB520S5"
      },
      "outputs": [],
      "source": [
        "#train and test variables\n",
        "from sklearn.model_selection import train_test_split\n",
        "#whenever we take train_test_split into consideration , by default we have 4 variable\n",
        "#the variable names can be changed ,but their order should not be changed\n",
        "x_train,x_test,y_train,y_test = train_test_split(x,y,random_state = 0)\n",
        "#random_state =0, in train_test_split , the data is randomly allocated to variables\n",
        "#but once allocated , we want the data to be constant"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "vQP6e80dDaZB",
        "outputId": "dbc5ab4e-19a6-4807-9c79-52c5dfbdc1b2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(918, 6)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Z6dfGqWiDaNc",
        "outputId": "a3fc4769-1c1f-4640-9ffb-ae42c8ea5977"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(688, 6)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "02Zbs_XUDmY7",
        "outputId": "33fe4967-f73d-4db3-99d8-280ed66afc72"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(230, 6)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_test.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "_IZpr5hWDqbY",
        "outputId": "a559796a-63f2-4b89-d226-281490dc1f72"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(918,)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "pNg8QRuNDs-h",
        "outputId": "c0774760-a9a9-47d4-92a6-dad20f131dcc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(688,)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_train.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "KPYjz97iDwvm",
        "outputId": "0b8917c7-e210-40f8-8064-d8915c35db3c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(230,)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_test.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "SwnwbQIJD4Ho"
      },
      "outputs": [],
      "source": [
        "#normalization or scaling - done only for inputs\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "x_train = scaler.fit_transform(x_train)\n",
        "x_test = scaler.fit_transform(x_test)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "cLrpnDNvD8pY"
      },
      "outputs": [],
      "source": [
        "#apply classifier /regressor/clusterer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "model = LogisticRegression()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "gROUDaM5D-_r",
        "outputId": "27b5112a-c2c7-4a27-fc15-9a4739e6f225"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#model fitting\n",
        "model.fit(x_train,y_train) # we fit the training data\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "2jR4P_oMECnX",
        "outputId": "2e113cfc-dffb-4af8-ef46-de945605ab2b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n",
              "       1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0,\n",
              "       1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1,\n",
              "       1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n",
              "       1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1,\n",
              "       1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1,\n",
              "       1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,\n",
              "       0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,\n",
              "       1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n",
              "       1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 0, 0, 1, 1, 1])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#predictor variable\n",
        "y_pred = model.predict(x_test)\n",
        "y_pred # predicted values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "vHGs4CuvEEz5",
        "outputId": "9c839dfa-9dc0-492b-d31e-aa6c666f1246"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n",
              "       1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0,\n",
              "       1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,\n",
              "       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n",
              "       1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1,\n",
              "       0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1,\n",
              "       0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n",
              "       0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,\n",
              "       0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n",
              "       1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1,\n",
              "       1, 1, 1, 0, 0, 1, 0, 1, 1, 1])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "XI575aBUEKYM",
        "outputId": "329f90c2-cbd8-472b-eb77-4765dd78f94d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "76.52173913043478"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#ACCURACY FOR LOGISTIC REGRESSION MODEL\n",
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_pred,y_test)*100"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "WLZVWr4QENk6",
        "outputId": "2f7d5465-adcf-4137-bb52-91c899eeaeec"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Individual Prediction\n",
        "model.predict([[20,40,74,0,35,26]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "k_Rie0PwNDqa"
      },
      "outputs": [],
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "model = KNeighborsClassifier(n_neighbors=30)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "EOC-Xez2NEyo",
        "outputId": "77a7d790-1dcf-45b8-eebd-6dba8fdb5dde"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=30)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#model fitting\n",
        "model.fit(x_train,y_train) # we fit the training data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "IhBEg4XONOHs",
        "outputId": "1c5b24d6-110d-4dba-ec64-70fc4276d60b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1,\n",
              "       1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0,\n",
              "       1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1,\n",
              "       1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,\n",
              "       1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1,\n",
              "       1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1,\n",
              "       1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,\n",
              "       0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,\n",
              "       1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1,\n",
              "       1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 0, 1, 1, 1])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#predictor variable\n",
        "y_pred = model.predict(x_test)\n",
        "y_pred # predicted values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "drGQNhsfNQmQ",
        "outputId": "135ca0cf-4e98-4e16-fee8-fcc510f2d83f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n",
              "       1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0,\n",
              "       1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,\n",
              "       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n",
              "       1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1,\n",
              "       0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1,\n",
              "       0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n",
              "       0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,\n",
              "       0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n",
              "       1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1,\n",
              "       1, 1, 1, 0, 0, 1, 0, 1, 1, 1])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "g5RuioWtNKfi",
        "outputId": "ea68c915-571a-49dc-e50a-ffe864b34949"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "74.34782608695653"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#accuracy for KNeighborsClassifier MODEL\n",
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_pred,y_test)*100"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "W_dlJXDRNTwy",
        "outputId": "f5542580-ae1f-4a18-c729-e05699ea0160"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Individual Prediction\n",
        "model.predict([[20,40,74,0,35,26]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "5pvup_w7w5fm",
        "outputId": "9dc53d42-956e-44b9-b10d-d88a22301f0a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 68,  24],\n",
              "       [ 35, 103]])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Show the Confusion Matrix\n",
        "confusion_matrix(y_test, y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "_YA_MC-HOHzb"
      },
      "outputs": [],
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "model = DecisionTreeClassifier(max_depth=3, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "IVyuOGa3ONyZ",
        "outputId": "c03b5a7b-e4fd-4102-d429-554fc1adfb01"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(max_depth=3, random_state=0)"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#model fitting\n",
        "model.fit(x_train,y_train) # we fit the training data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "4MQZxu32OWdn",
        "outputId": "aeebdace-9e69-4d40-afdc-2dbe88c775d3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1,\n",
              "       0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0,\n",
              "       1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n",
              "       1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1,\n",
              "       1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,\n",
              "       0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,\n",
              "       1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0,\n",
              "       0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,\n",
              "       1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1,\n",
              "       1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 0, 1, 1, 1])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#predictor variable\n",
        "y_pred = model.predict(x_test)\n",
        "y_pred # predicted values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Hwr_V0fhObzI",
        "outputId": "9f11ea89-9eae-4996-ecd6-05186ba6291d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n",
              "       1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0,\n",
              "       1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,\n",
              "       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n",
              "       1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1,\n",
              "       0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1,\n",
              "       0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n",
              "       0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,\n",
              "       0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n",
              "       1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1,\n",
              "       1, 1, 1, 0, 0, 1, 0, 1, 1, 1])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "ZEUp1qNjOm9S",
        "outputId": "1a1a8f30-e010-45e8-c4e1-f97a7d70bda1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "76.95652173913044"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#accuracy for DECISION TREE MODEL\n",
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_pred,y_test)*100"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "sQP-AYdY5sXe",
        "outputId": "4f6bc5b0-6ee7-4486-94b3-c279cfe477c0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0.53061224, 0.46969697, 0.50226244, 0.        , 0.68376068,\n",
              "        0.19230769],\n",
              "       [0.73469388, 0.68181818, 0.        , 0.        , 0.4017094 ,\n",
              "        0.38461538],\n",
              "       [0.40816327, 0.74242424, 0.38461538, 0.        , 0.47008547,\n",
              "        0.38461538],\n",
              "       ...,\n",
              "       [0.59183673, 0.43939394, 0.71945701, 0.        , 0.71794872,\n",
              "        0.19230769],\n",
              "       [0.73469388, 0.53030303, 0.59276018, 0.        , 0.23076923,\n",
              "        0.90384615],\n",
              "       [0.3877551 , 0.1969697 , 0.45701357, 0.        , 0.65811966,\n",
              "        0.19230769]])"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4eb22I7HPgxB"
      },
      "outputs": [],
      "source": [
        "!pip install -q streamlit"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K0-zva_UOqTM"
      },
      "outputs": [],
      "source": [
        "!pip install pyngrok"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9xsy91f0P2CY"
      },
      "outputs": [],
      "source": [
        "%%writefile app.py\n",
        "import streamlit as st\n",
        "import numpy as np\n",
        "st.title(\"HEART FAILURE PREDICTION\")\n",
        "age = st.slider('Age', 10, 80, 5)\n",
        "rbp = st.slider('Resting BP', 100, 200, 10)\n",
        "chstrl = st.slider('Cholestrol', 50, 300, 20)\n",
        "MHR = st.slider('MaxHR', 60,200, 10)\n",
        "#from sklearn.model_selection import train_test_split\n",
        "#x_train,x_test,y_train,y_test = train_test_split(x,y,random_state = 0)\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "x_train = scaler.fit_transform(x_train)\n",
        "x_test = scaler.fit_transform(x_test)\n",
        "\n",
        "#from sklearn.linear_model import LogisticRegression\n",
        "#model = LogisticRegression()\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "model = DecisionTreeClassifier(max_depth=3, random_state=0)\n",
        "model.fit(x_train,y_train)\n",
        "op = model.predict([[age,rbp,chstrl,MHR]])\n",
        "st.title(op)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jrStCl4_QSLO"
      },
      "outputs": [],
      "source": [
        "!streamlit run app.py & npx localtunnel --port 8501"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Zdqd9T1rlhN9"
      },
      "outputs": [],
      "source": [
        "#THIS IS THE TRAINING MODEL THAT WE ARE USING ---->> MODEL XGBOOST"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e7jjVxwUlofZ"
      },
      "outputs": [],
      "source": [
        "# model building xgboost\n",
        "#from xgboost import XGBClassifier\n",
        "#model = XGBClassifier(n_estimators=590)\n",
        "#model.fit(X_train, y_train)\n",
        "# predict\n",
        "#y_pred = model.predict(X_test)\n",
        "# accuracy\n",
        "#from sklearn.metrics import accuracy_score\n",
        "#print('Accuracy:', accuracy_score(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DqTf9FTplu_i"
      },
      "outputs": [],
      "source": [
        "# Finding the best parameters using loop\n",
        "#accuracy = []\n",
        "#for i in range(550, 600):\n",
        "    #model = XGBClassifier(n_estimators=i)\n",
        "    #model.fit(X_train, y_train)\n",
        "    #y_pred = model.predict(X_test)\n",
        "    #accuracy.append(accuracy_score(y_test, y_pred))\n",
        "# ploting accuracy graph\n",
        "#plt.plot(range(550, 600), accuracy)\n",
        "#plt.ylabel('Accuracy')\n",
        "#plt.xlabel('Range')\n",
        "#plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V6KvSH4dl5NQ"
      },
      "outputs": [],
      "source": [
        "# print precetion, recall, f1 score\n",
        "#from sklearn.metrics import classification_report\n",
        "#print(classification_report(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qioKN3Ezl9aN"
      },
      "outputs": [],
      "source": [
        "# confusion matrix\n",
        "#from sklearn.metrics import confusion_matrix\n",
        "#cm = confusion_matrix(y_test, y_pred)\n",
        "#plt.figure(figsize=(5,3))\n",
        "#sns.heatmap(cm, annot=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3DWC92UPmArN"
      },
      "source": [
        "# Feature importance for xgboost\n",
        "#feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n",
        "#feat_importances.nlargest(10).plot(kind='barh')\n",
        "#plt.xlabel('Relative Importance')\n",
        "#plt.ylabel('Features')\n",
        "#plt.title('Feature Importances')\n",
        "#plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Heart Failure Prediction.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}